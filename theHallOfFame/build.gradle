plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id "org.asciidoctor.jvm.convert" version "3.3.2" // asciidoctor 플러그인
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// lombok 설정 추가
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt // asciidoctorExt에 대한 종속성 구성
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // spotify api
    //implementation 'com.github.thelinmichael:spotify-web-api-java:master-SNAPSHOT'
    implementation 'se.michaelthelin.spotify:spotify-web-api-java:6.5.2'

    // mongodb 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    //lombok 라이브러리
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'



	//jwt 라이브러리
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
	// javax.xml.bind
	implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'

	// bean validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

    // rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor' // asciidoctorExt
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // MockMvc
}

ext { // 스니펫 생성 디렉토리 설정
    snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir // 스니펫 생성 test 테스크 설정
}

asciidoctor { // asciidoctor 테스크 설정
    inputs.dir snippetsDir // 스니펫 위치 설정
    configurations 'asciidoctorExt' // asciidoctor 확장 설정
    dependsOn test // test 후 asciidoctor 실행 설정
}


// bootJar {
// 	dependsOn asciidoctor // bootJar 빌드 전, asciidoctor 테스크가 먼저 실행이 되도록
// //	from("${asciidoctor.outputDir}") { // 생성한 html 파일 위치
// //		into 'static/docs' // jar의 - 디렉토리 안에 생성된 문서를 복사
// //	}
//     copy {
//         from ("${asciidoctor.outputDir}") {
//             into 'static/docs'
//             //into 'src/main/resources/static/docs'
//         }
//     }
// }

tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    doFirst {
        delete file('src/main/resources/static/docs')
    }
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}


build {
    dependsOn copyDocument
}


bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}
